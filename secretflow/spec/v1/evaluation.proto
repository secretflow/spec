// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package secretflow.spec.v1;

option java_outer_classname = "EvaluationProto";
option java_package = "com.secretflow.spec.v1";
option java_multiple_files = true;

import "secretflow/spec/v1/component.proto";
import "secretflow/spec/v1/data.proto";

// Evaluate a node.
// - CompListDef + StorageConfig + NodeEvalParam + other extra configs ->
// NodeEvalResult
//
// NodeEvalParam contains all the information to evaluate a component.
message NodeEvalParam {
  // Domain of the component.
  string domain = 1;

  // Name of the component.
  string name = 2;

  // Version of the component.
  string version = 3;

  // The path of attributes.
  // The attribute path for a TableAttrDef is
  // `(input\|output)/(IoDef name)/(TableAttrDef name)(/(column name)(/(extra
  // attributes))?)?`.
  repeated string attr_paths = 4;

  // The value of the attribute.
  // Must match attr_paths.
  repeated Attribute attrs = 5;

  // The input data, the order of inputs must match inputs in ComponentDef.
  // NOTE: Names of DistData doesn't need to match those of inputs in
  // ComponentDef definition.
  repeated DistData inputs = 6;

  // The output data uris, the order of output_uris must match outputs in
  // ComponentDef.
  repeated string output_uris = 7;

  // If not empty:
  // 1. Component will try to save checkpoint during training if the component
  // supports it.
  // 2. Component will try to reload checkpoint when starting to continue the
  // previous training. If the checkpoint does not exist or cannot be loaded,
  // training will be starting from scratch.
  //
  string checkpoint_uri = 8;
}

// NodeEvalResult contains outputs of a component evaluation.
message NodeEvalResult {
  // Output data.
  repeated DistData outputs = 1;
}
