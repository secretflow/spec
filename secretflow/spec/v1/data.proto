// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package secretflow.spec.v1;

option java_outer_classname = "DataProto";
option java_package = "com.secretflow.spec.v1";
option java_multiple_files = true;

import "google/protobuf/any.proto";

// Describe the application related to data.
message SystemInfo {
  // The application name.
  // Supported: `secretflow`
  string app = 1;

  // Meta for application.
  google.protobuf.Any app_meta = 2;
}

// A StorageConfig specifies the root for all data for one party.
// - At this moment, only local_fs is supported
// - We would support OSS, databases in future.
message StorageConfig {
  // Supported: local_fs.
  string type = 1;

  // For local_fs.
  message LocalFSConfig {
    // Working directory.
    string wd = 1;
  }
  // local_fs config.
  LocalFSConfig local_fs = 2;
}

// A public record for a general distributed data.
//
// The type of this distributed data, should be meaningful to components.
//
// The concrete data format (include public and private parts) is defined by
// other protos.
//
// Suggested internal types, i.e.
// - sf.table.vertical_table      represent a secretflow vertical table
// - sf.table.individual_table      represent a secretflow individual table
message DistData {
  // The name of this distributed data.
  string name = 1;

  // Type.
  string type = 2;

  // Describe the system information that used to generate this distributed
  // data.
  SystemInfo system_info = 3;

  // Public information, known to all parties.
  // i.e. VerticalTable.
  google.protobuf.Any meta = 4;

  // A reference to a data that is stored in the remote path.
  message DataRef {
    // The path information relative to StorageConfig of the party.
    string uri = 1;

    // The owner party.
    string party = 2;

    // The storage format, i.e. csv.
    string format = 3;
  }

  // Remote data references.
  repeated DataRef data_refs = 5;
}

// VerticalTable describes a virtual vertical partitioning table from multiple
// parties.
message VerticalTable {
  // The vertical partitioned slices' schema.
  // Must match data_refs in the parent DistData message.
  repeated TableSchema schemas = 1;

  // If -1, the number is unknown.
  int64 line_count = 2;
}

// IndividualTable describes a table owned by a single party.
message IndividualTable {
  // Schema.
  TableSchema schema = 1;

  // If -1, the number is unknown.
  int64 line_count = 2;
}

// The schema of a table.
// - A col must be one of `id | feature | label`. By default, it should be a
// feature.
// - All names must match the regexp `[A-Za-z0-9.][A-Za-z0-9_>./]*`.
// - All data type must be one of
// * int8
// * int16
// * int32
// * int64
// * uint8
// * uint16
// * uint32
// * uint64
// * float16
// * float32
// * float64
// * bool
// * int
// * float
// * str
message TableSchema {
  // Id column name(s).
  // Optional, can be empty.
  repeated string ids = 1;

  // Feature column name(s).
  repeated string features = 2;

  // Label column name(s).
  // Optional, can be empty.
  repeated string labels = 3;

  // Id column data type(s).
  // Len(id) should match len(id_types).
  repeated string id_types = 4;

  // Feature column data type(s).
  // Len(features) should match len(feature_types).
  repeated string feature_types = 5;

  // Label column data type(s).
  // Len(labels) should match len(label_types).
  repeated string label_types = 6;
}
