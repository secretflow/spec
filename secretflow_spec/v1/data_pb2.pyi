"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class SystemInfo(google.protobuf.message.Message):
    """Describe the application related to data."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    APP_FIELD_NUMBER: builtins.int
    APP_META_FIELD_NUMBER: builtins.int
    app: builtins.str
    """The application name.
    Supported: `secretflow`
    """
    @property
    def app_meta(self) -> google.protobuf.any_pb2.Any:
        """Meta for application."""

    def __init__(
        self,
        *,
        app: builtins.str = ...,
        app_meta: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["app_meta", b"app_meta"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["app", b"app", "app_meta", b"app_meta"]) -> None: ...

global___SystemInfo = SystemInfo

@typing.final
class StorageConfig(google.protobuf.message.Message):
    """A StorageConfig specifies the root for all data for one party.
    - At this moment, only local_fs / S3 compatible object storage is supported
    - We would support databases like mysql etc. in future.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class LocalFSConfig(google.protobuf.message.Message):
        """For local_fs."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        WD_FIELD_NUMBER: builtins.int
        wd: builtins.str
        """Working directory."""
        def __init__(
            self,
            *,
            wd: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["wd", b"wd"]) -> None: ...

    @typing.final
    class S3Config(google.protobuf.message.Message):
        """For S3 compatible object storage"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ENDPOINT_FIELD_NUMBER: builtins.int
        BUCKET_FIELD_NUMBER: builtins.int
        PREFIX_FIELD_NUMBER: builtins.int
        ACCESS_KEY_ID_FIELD_NUMBER: builtins.int
        ACCESS_KEY_SECRET_FIELD_NUMBER: builtins.int
        VIRTUAL_HOST_FIELD_NUMBER: builtins.int
        VERSION_FIELD_NUMBER: builtins.int
        endpoint: builtins.str
        """endpoint https://play.min.io or http://127.0.0.1:9000 with scheme"""
        bucket: builtins.str
        """the bucket name of the oss datasource"""
        prefix: builtins.str
        """the prefix of the oss datasource. e.g.  data/traindata/"""
        access_key_id: builtins.str
        """access key"""
        access_key_secret: builtins.str
        """access secret"""
        virtual_host: builtins.bool
        """virtual_host is the same as AliyunOSS/AWS S3's virtualhost , default true"""
        version: builtins.str
        """optional enum[s3v2,s3v4]"""
        def __init__(
            self,
            *,
            endpoint: builtins.str = ...,
            bucket: builtins.str = ...,
            prefix: builtins.str = ...,
            access_key_id: builtins.str = ...,
            access_key_secret: builtins.str = ...,
            virtual_host: builtins.bool = ...,
            version: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["access_key_id", b"access_key_id", "access_key_secret", b"access_key_secret", "bucket", b"bucket", "endpoint", b"endpoint", "prefix", b"prefix", "version", b"version", "virtual_host", b"virtual_host"]) -> None: ...

    TYPE_FIELD_NUMBER: builtins.int
    LOCAL_FS_FIELD_NUMBER: builtins.int
    S3_FIELD_NUMBER: builtins.int
    type: builtins.str
    """enum[local_fs, s3]"""
    @property
    def local_fs(self) -> global___StorageConfig.LocalFSConfig:
        """local_fs config."""

    @property
    def s3(self) -> global___StorageConfig.S3Config:
        """s3 config"""

    def __init__(
        self,
        *,
        type: builtins.str = ...,
        local_fs: global___StorageConfig.LocalFSConfig | None = ...,
        s3: global___StorageConfig.S3Config | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["local_fs", b"local_fs", "s3", b"s3"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["local_fs", b"local_fs", "s3", b"s3", "type", b"type"]) -> None: ...

global___StorageConfig = StorageConfig

@typing.final
class DistData(google.protobuf.message.Message):
    """A public record for a general distributed data.

    The type of this distributed data, should be meaningful to components.

    The concrete data format (include public and private parts) is defined by
    other protos.

    Suggested internal types, i.e.
    - sf.table.vertical_table      represent a secretflow vertical table
    - sf.table.individual_table      represent a secretflow individual table
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class DataRef(google.protobuf.message.Message):
        """A reference to a data that is stored in the remote path."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        URI_FIELD_NUMBER: builtins.int
        PARTY_FIELD_NUMBER: builtins.int
        FORMAT_FIELD_NUMBER: builtins.int
        NULL_STRS_FIELD_NUMBER: builtins.int
        uri: builtins.str
        """The path information relative to StorageConfig of the party."""
        party: builtins.str
        """The owner party."""
        format: builtins.str
        """The storage format, support:
        - csv   represent a comma-separated value format file
        - orc   represent a apache orc format file
        """
        @property
        def null_strs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """A list of strings that represent NULL value.
            Only take effect when format is csv
            """

        def __init__(
            self,
            *,
            uri: builtins.str = ...,
            party: builtins.str = ...,
            format: builtins.str = ...,
            null_strs: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["format", b"format", "null_strs", b"null_strs", "party", b"party", "uri", b"uri"]) -> None: ...

    VERSION_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    SYSTEM_INFO_FIELD_NUMBER: builtins.int
    META_FIELD_NUMBER: builtins.int
    DATA_REFS_FIELD_NUMBER: builtins.int
    version: builtins.str
    """The version of spec"""
    name: builtins.str
    """The name of this distributed data."""
    type: builtins.str
    """Type."""
    @property
    def system_info(self) -> global___SystemInfo:
        """Describe the system information that used to generate this distributed
        data.
        """

    @property
    def meta(self) -> google.protobuf.any_pb2.Any:
        """Public information, known to all parties.
        i.e. VerticalTable.
        """

    @property
    def data_refs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DistData.DataRef]:
        """Remote data references."""

    def __init__(
        self,
        *,
        version: builtins.str = ...,
        name: builtins.str = ...,
        type: builtins.str = ...,
        system_info: global___SystemInfo | None = ...,
        meta: google.protobuf.any_pb2.Any | None = ...,
        data_refs: collections.abc.Iterable[global___DistData.DataRef] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["meta", b"meta", "system_info", b"system_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data_refs", b"data_refs", "meta", b"meta", "name", b"name", "system_info", b"system_info", "type", b"type", "version", b"version"]) -> None: ...

global___DistData = DistData

@typing.final
class VerticalTable(google.protobuf.message.Message):
    """VerticalTable describes a virtual vertical partitioning table from multiple
    parties.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCHEMAS_FIELD_NUMBER: builtins.int
    LINE_COUNT_FIELD_NUMBER: builtins.int
    line_count: builtins.int
    """If -1, the number is unknown."""
    @property
    def schemas(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TableSchema]:
        """The vertical partitioned slices' schema.
        Must match data_refs in the parent DistData message.
        """

    def __init__(
        self,
        *,
        schemas: collections.abc.Iterable[global___TableSchema] | None = ...,
        line_count: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["line_count", b"line_count", "schemas", b"schemas"]) -> None: ...

global___VerticalTable = VerticalTable

@typing.final
class IndividualTable(google.protobuf.message.Message):
    """IndividualTable describes a table owned by a single party."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCHEMA_FIELD_NUMBER: builtins.int
    LINE_COUNT_FIELD_NUMBER: builtins.int
    line_count: builtins.int
    """If -1, the number is unknown."""
    @property
    def schema(self) -> global___TableSchema:
        """Schema."""

    def __init__(
        self,
        *,
        schema: global___TableSchema | None = ...,
        line_count: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["schema", b"schema"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["line_count", b"line_count", "schema", b"schema"]) -> None: ...

global___IndividualTable = IndividualTable

@typing.final
class TableSchema(google.protobuf.message.Message):
    """The schema of a table.
    - A col must be one of `id | feature | label`. By default, it should be a
    feature.
    - All names must match the regexp `[A-Za-z0-9.][A-Za-z0-9_>./]*`.
    - All data type must be one of
    * int8
    * int16
    * int32
    * int64
    * uint8
    * uint16
    * uint32
    * uint64
    * float16
    * float32
    * float64
    * bool
    * int
    * float
    * str
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDS_FIELD_NUMBER: builtins.int
    FEATURES_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    ID_TYPES_FIELD_NUMBER: builtins.int
    FEATURE_TYPES_FIELD_NUMBER: builtins.int
    LABEL_TYPES_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Id column name(s).
        Optional, can be empty.
        """

    @property
    def features(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Feature column name(s)."""

    @property
    def labels(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Label column name(s).
        Optional, can be empty.
        """

    @property
    def id_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Id column data type(s).
        Len(id) should match len(id_types).
        """

    @property
    def feature_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Feature column data type(s).
        Len(features) should match len(feature_types).
        """

    @property
    def label_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Label column data type(s).
        Len(labels) should match len(label_types).
        """

    def __init__(
        self,
        *,
        ids: collections.abc.Iterable[builtins.str] | None = ...,
        features: collections.abc.Iterable[builtins.str] | None = ...,
        labels: collections.abc.Iterable[builtins.str] | None = ...,
        id_types: collections.abc.Iterable[builtins.str] | None = ...,
        feature_types: collections.abc.Iterable[builtins.str] | None = ...,
        label_types: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["feature_types", b"feature_types", "features", b"features", "id_types", b"id_types", "ids", b"ids", "label_types", b"label_types", "labels", b"labels"]) -> None: ...

global___TableSchema = TableSchema

@typing.final
class ObjectFileInfo(google.protobuf.message.Message):
    """ObjectFileInfo describes metadata for unstructured data file, such as Model"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class AttributesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    ATTRIBUTES_FIELD_NUMBER: builtins.int
    @property
    def attributes(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Any public attributes"""

    def __init__(
        self,
        *,
        attributes: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["attributes", b"attributes"]) -> None: ...

global___ObjectFileInfo = ObjectFileInfo
